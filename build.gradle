import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.signal.signing.ApkSignerUtil

import java.security.MessageDigest

buildscript {
    repositories {
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
        maven {
            url "https://repo1.maven.org/maven2"
            jcenter()
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.2'
        classpath files('libs/gradle-witness.jar')
    }
}

apply plugin: 'com.android.application'
apply plugin: 'witness'
apply plugin: 'jacoco'

repositories {
    maven {
        url "https://raw.github.com/signalapp/maven/master/photoview/releases/"
        content {
            includeGroupByRegex "com\\.github\\.chrisbanes.*"
        }
    }
    maven {
        url "https://raw.github.com/signalapp/maven/master/shortcutbadger/releases/"
        content {
            includeGroupByRegex "me\\.leolin.*"
        }
    }
    maven {
        url "https://raw.github.com/signalapp/maven/master/circular-progress-button/releases/"
        content {
            includeGroupByRegex "com\\.github\\.dmytrodanylyk\\.circular-progress-button\\.*"
        }
    }
    maven {
        url "https://raw.github.com/signalapp/maven/master/sqlcipher/release/"
        content {
            includeGroupByRegex "org\\.signal.*"
        }
    }
    maven { // textdrawable
        url 'https://dl.bintray.com/amulyakhare/maven'
        content {
            includeGroupByRegex "com\\.amulyakhare.*"
        }
    }
    maven {
        url "https://maven.google.com"
    }
    google()
    jcenter()
    mavenLocal()
}


dependencies {
    def supportVersion = '28.0.0'

    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:recyclerview-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"
    implementation "com.android.support:support-v13:$supportVersion"
    implementation "com.android.support:cardview-v7:$supportVersion"
    implementation "com.android.support:preference-v7:$supportVersion"
    implementation "com.android.support:preference-v14:$supportVersion"
    implementation "com.android.support:gridlayout-v7:$supportVersion"
    implementation "com.android.support:exifinterface:$supportVersion"
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'android.arch.lifecycle:common-java8:1.1.1'
    implementation 'android.arch.work:work-runtime:1.0.0-beta01'

    implementation 'com.google.android.gms:play-services-gcm:16.0.0'
    implementation 'com.google.android.gms:play-services-maps:16.0.0'
    implementation 'com.google.android.gms:play-services-places:16.0.0'
    implementation 'com.google.android.gms:play-services-auth:16.0.1'

    implementation 'com.google.android.exoplayer:exoplayer-core:2.9.1'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.9.1'

    implementation 'org.whispersystems:signal-service-android:2.12.2'
    implementation 'org.whispersystems:webrtc-android:M69'

    implementation "me.leolin:ShortcutBadger:1.1.16"
    implementation 'se.emilsjolander:stickylistheaders:2.7.0'
    implementation 'com.jpardogo.materialtabstrip:library:1.0.9'
    implementation 'org.apache.httpcomponents:httpclient-android:4.3.5'
    implementation 'com.github.chrisbanes:PhotoView:2.1.3'
    implementation 'com.github.bumptech.glide:glide:4.5.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.5.0'
    implementation 'com.makeramen:roundedimageview:2.1.0'
    implementation 'com.pnikosis:materialish-progress:1.5'
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'pl.tajchert:waitingdots:0.1.0'
    implementation 'com.soundcloud.android:android-crop:0.9.10@aar'
    implementation 'com.melnykov:floatingactionbutton:1.3.0'
    implementation 'com.google.zxing:android-integration:3.1.0'
    implementation 'com.squareup.dagger:dagger:1.2.2'
    annotationProcessor 'com.squareup.dagger:dagger-compiler:1.2.2'
    implementation 'mobi.upod:time-duration-picker:1.1.3'
    compileOnly 'com.squareup.dagger:dagger-compiler:1.2.2'
    implementation 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    implementation 'com.google.zxing:core:3.2.1'
    implementation('com.davemorrissey.labs:subsampling-scale-image-view:3.6.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation('cn.carbswang.android:NumberPickerView:1.0.9') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    implementation('com.tomergoldst.android:tooltips:1.0.6') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    implementation('com.klinkerapps:android-smsmms:4.0.1') {
        exclude group: 'com.squareup.okhttp', module: 'okhttp'
        exclude group: 'com.squareup.okhttp', module: 'okhttp-urlconnection'
    }
    implementation 'com.annimon:stream:1.1.8'
    implementation('com.takisoft.fix:colorpicker:0.9.1') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    implementation 'com.codewaves.stickyheadergrid:stickyheadergrid:0.9.4'
    implementation 'com.github.dmytrodanylyk.circular-progress-button:library:1.1.3-S2'
    implementation 'org.signal:android-database-sqlcipher:3.5.9-S3'
    implementation('com.googlecode.ez-vcard:ez-vcard:0.9.11') {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'org.freemarker'
    }

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:1.7.1'
    testImplementation 'org.mockito:mockito-core:1.9.5'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.1'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.1'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.1'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.1'
    androidTestUtil 'com.android.support.test:orchestrator:1.0.1'

    implementation 'com.android.support:multidex:1.0.3'
    androidTestImplementation 'com.android.support:multidex-instrumentation:1.0.3'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation('org.assertj:assertj-core:1.7.1') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    androidTestImplementation('com.squareup.assertj:assertj-android:1.1.1') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    /*Espresso UI Testing
    all other required dependencies https://developer.android.com/training/testing/set-up-project */
    androidTestImplementation 'androidx.test:core:1.0.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation 'androidx.test:core:1.0.0'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.0.0'
    androidTestImplementation 'androidx.test.ext:truth:1.0.0'
    androidTestImplementation 'com.google.truth:truth:0.42'
//    androidTestImplementation 'org.mockito:mockito-android:2.25.0'

}

// Gerate Dependecy Verification by
// gradle -q calculateChecksums
/*
dependencyVerification {
    verify = [
            'com.android.support:design:7874ad1904eedc74aa41cffffb7f759d8990056f3bbbc9264911651c67c42f5f',
            'com.android.support:preference-v14:8133c6e19233fa51e036a341e6d3f4adeead3375cebf777efced0fe154c3267e',
            'com.android.support:preference-v7:75eabe936d1fc3b178450a554c4d433466036f2be6d6dccdf971eac9590fdbf5',
            'com.android.support:appcompat-v7:a3a8e5230359746ed91801579b5fbe4668e3b1c4e6a14c7d67c8f58cb0311752',
            'com.android.support:recyclerview-v7:eb296414c1f6d4c7b522f69fe50588ea85297855db0e7806c24eb4f75409587d',
            'com.android.support:support-v13:491f940c5d6d2ec7678fa2f14bd4bbbe8bf776e2c776d04bf0e5c2175975be43',
            'com.android.support:cardview-v7:bc9e6b0e06ce1205f1db34f0e6193019613d19cfeb54cdccea722340d1c60f26',
            'com.android.support:gridlayout-v7:5029529f7db66f8773426bf7318645f0840fc50d74f66355cd60c5e58d2da087',
            'com.android.support:exifinterface:bbf44e519edd6333a24a3285aa21fd00181b920b81ca8aa89a8899f03ab4d6b0',
            'com.android.support:multidex:ecf6098572e23b5155bab3b9a82b2fd1530eda6c6c157745e0f5287c66eec60c',
            'com.davemorrissey.labs:subsampling-scale-image-view:550c5baa07e0bb4ff0a18b705e96d34436d22619248bd8c08c08c730b1f55cfe',
            'cn.carbswang.android:NumberPickerView:18b3c316d62c7c277978a8d4ed57a5b8f4e943762264960f579a8a549c756729',
            'com.tomergoldst.android:tooltips:4c56697dd1ad64b8066535c61f961a6d901e7ae5d97ae27084ba40ad620349b6',
            'com.klinkerapps:android-smsmms:e7c3328a0f3a8dd44daa8129de4e99996f3057a4546e47891b036b81e0ebf1d1',
            'com.takisoft.fix:colorpicker:f5d0dbabe406a1800498ca9c1faf34db36e021d8488bf10360f29961fe3ab0d1',
            'com.googlecode.ez-vcard:ez-vcard:7e24ad50b222d2f70ac91bdccfa3c0f6200b078d797cb784837f75e77bb4210f',
            'com.android.support:support-v4:8b9031381c678d628c9e47b566ae1d161e1c9710f7855c759beeac7596cecf30',
            'com.android.support:support-fragment:3772fc738ada86824ba1a4b3f197c3dbd67b7ddcfe2c9db1de95ef2e3487a915',
            'com.android.support:animated-vector-drawable:271ecbc906cda8dcd9e655ba0473129c3408a4189c806f616c378e6fd18fb3b7',
            'com.android.support:support-core-ui:bbc7f65fc95649464733af373361532ab5f9f3b749c3badaa2bbf27e574b6c6f',
            'com.android.support:support-core-utils:c81e1e98ca3cb2edae002c69cf35b22aec364b8cb2f1042c97e206eb5790ac41',
            'com.android.support:support-vector-drawable:f658986d968172bccfed28578471c96050780fe5e133861e4d331069cc373f4d',
            'com.android.support:transition:45d09fc51284c17bbab300f5122512ac7d7348a6d23bda2051648bbe76cc9aa5',
            'com.android.support:loader:920b85efd72dc33e915b0f88a883fe73b88483c6df8751a741e17611f2460341',
            'com.android.support:viewpager:013c4c53058758ec104dbae970be58159f75dfe342ba8b937d15ff5282e35ffc',
            'com.android.support:coordinatorlayout:9dfacd80423dc979048fbaed83c0ee543c46259feb2417377e79a656888d3892',
            'com.android.support:drawerlayout:8f6809afae4793550c37461c9810e954ae6a23dbb4d23e5333bf18148df1150a',
            'com.android.support:slidingpanelayout:d1d234f66a1b36a9aee9b94fa6c66f97128c0828078c8e889e9037ec898cd600',
            'com.android.support:customview:98db03845f994e08248bf701c1ff0ccaa12e70f94251ec9272900f0f694e072b',
            'com.android.support:swiperefreshlayout:a3b41f7f6730866b49865e86e49f988d4858699765f534300fb2ff5f9325e712',
            'com.android.support:asynclayoutinflater:115bde87721f7334579b0c735f60dd7c98af1bb7f34010c5b0553b95dc351aa2',
            'com.android.support:support-media-compat:266eff9605f515013eee1ebdbd8818a9270696dc807f34bbcc5fc11fb61a22c7',
            'com.android.support:support-compat:e17e3b01dbea3f9ea1c86943292f903ca93d2231c6242e456e0b6a9c5817118a',
            'com.android.support:versionedparcelable:60eb1cb08f71b65c3f6123135e03ebeb5930b5e126e1e5b2ac91b386908c9d02',
            'com.android.support:collections:93c258c8a09f531a267653829742c0f8f6da0e348b11cb8655b0855628f2d4f0',
            'com.android.support:cursoradapter:87feffe742b8d62ca8a9833abe564838bf6a672e31c7ad1306ec4006adf90d21',
            'android.arch.lifecycle:runtime:c4e4be66c1b2f0abec593571454e1de14013f7e0f96bf2a9f212931a48cae550',
            'com.android.support:documentfile:47cdcd3e9302b7b064923f05487a5c03babbd9bbda4726b71e97791fab5d4779',
            'com.android.support:localbroadcastmanager:d287c823af5fdde72c099fcfc5f630efe9687af7a914343ae6fd92de32c8a806',
            'com.android.support:print:4be8a812d73e4a80e35b91ceae127def3f0bb9726bf3bc439aa0cc81503f5728',
            'android.arch.lifecycle:viewmodel:7de29cfaba77d6b5d5be234c57f6812d0150d087e63941af22ba1d1f8e2bc96a',
            'com.android.support:interpolator:7bc7ee86a0db39a4b51956f3e89842d2bd962118d57d779eb6ed6b34ba0677ea',
            'android.arch.lifecycle:livedata:50ab0490c1ff1a7cfb4e554032998b080888946d0dd424f39900efc4a1bcd750',
            'android.arch.lifecycle:livedata-core:d6fdd8b985d6178d7ea2f16986a24e83f1bee936b74d43167c69e08d3cc12c50',
            'android.arch.lifecycle:common:8d378e88ebd5189e09eef623414812c868fd90aa519d6160e2311fb8b81cff56',
            'android.arch.core:runtime:c3215aa5873311b3f88a6f4e4a3c25ad89971bc127de8c3e1291c57f93a05c39',
            'android.arch.core:common:3a616a32f433e9e23f556b38575c31b013613d3ae85206263b7625fe1f4c151a',
            'com.android.support:support-annotations:5d5b9414f02d3fa0ee7526b8d5ddae0da67c8ecc8c4d63ffa6cf91488a93b927',
            'com.klinkerapps:logger:177e325259a8b111ad6745ec10db5861723c99f402222b80629f576f49408541',
            'com.google.android:flexbox:a9989fd13ae2ee42765dfc515fe362edf4f326e74925d02a10369df8092a4935',
            'org.jsoup:jsoup:abeaf34795a4de70f72aed6de5966d2955ec7eb348eeb813324f23c999575473',
    ]
}
*/

// For each file containing @Test
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.append = false
    jacoco.classDumpDir = file("$buildDir/jacoco/classDump")
    testLogging {
        // Set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // Set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            // Need to match the outermost suite
            if (!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

android {
    flavorDimensions "none"
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    useLibrary 'org.apache.http.legacy'

    // added for unit test
    testOptions {
        unitTests.returnDefaultValues = true
    }
    dexOptions {
        javaMaxHeapSize project.hasProperty('javaMaxHeapSize') ? project.getProperty('javaMaxHeapSize') : "4g"
    }

    defaultConfig {
        versionCode 437
        versionName "4.31.6"

        minSdkVersion 19
        targetSdkVersion 26
        multiDexEnabled true

        vectorDrawables.useSupportLibrary = true
        project.ext.set("archivesBaseName", "Signal");

        buildConfigField "long", "BUILD_TIMESTAMP", getLastCommitTimestamp() + "L"
        buildConfigField "String", "SIGNAL_URL", "\"https://textsecure-service.whispersystems.org\""
        buildConfigField "String", "SIGNAL_CDN_URL", "\"https://cdn.signal.org\""
        buildConfigField "String", "SIGNAL_CONTACT_DISCOVERY_URL", "\"https://api.directory.signal.org\""
        buildConfigField "String", "SIGNAL_SERVICE_STATUS_URL", "\"uptime.signal.org\""
        buildConfigField "String", "GIPHY_PROXY_HOST", "\"giphy-proxy-production.whispersystems.org\""
        buildConfigField "int", "GIPHY_PROXY_PORT", "80"
        buildConfigField "String", "USER_AGENT", "\"OWA\""
        buildConfigField "boolean", "DEV_BUILD", "false"
        buildConfigField "String", "MRENCLAVE", "\"cd6cfc342937b23b1bdd3bbf9721aa5615ac9ff50a75c5527d441cd3276826c9\""
        buildConfigField "String", "UNIDENTIFIED_SENDER_TRUST_ROOT", "\"BXu6QIKVz5MA8gstzfOgRQGqyLqOwNKHL6INkv3IHWMF\""

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
        //For Espresso UI Testing
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'NOTICE'
        exclude 'asm-license.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-google-play-services.pro',
                    'proguard-dagger.pro',
                    'proguard-jackson.pro',
                    'proguard-sqlite.pro',
                    'proguard-appcompat-v7.pro',
                    'proguard-square-okhttp.pro',
                    'proguard-square-okio.pro',
                    'proguard-spongycastle.pro',
                    'proguard-rounded-image-view.pro',
                    'proguard-glide.pro',
                    'proguard-shortcutbadger.pro',
                    'proguard-retrofit.pro',
                    'proguard-webrtc.pro',
                    'proguard-klinker.pro',
                    'proguard-retrolambda.pro',
                    'proguard-okhttp.pro',
                    'proguard-ez-vcard.pro',
                    'proguard-workmanager.pro',
                    'proguard.cfg'
            testProguardFiles 'proguard-automation.pro',
                    'proguard.cfg'
        }
        release {
            minifyEnabled true
            proguardFiles = buildTypes.debug.proguardFiles
        }
    }

    productFlavors {
        play {
            dimension "none"
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "false"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
        }

        website {
            dimension "none"
            ext.websiteUpdateUrl = "https://updates.signal.org/android"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "true"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "\"$ext.websiteUpdateUrl\""
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = outputFileName.replace(".apk", "-${variant.versionName}.apk")
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        androidTest {
            java.srcDirs = ['test/androidTest/java']
        }
        test {
            java.srcDirs = ['test/unitTest/java']
        }

        website.manifest.srcFile 'website/AndroidManifest.xml'
    }

    lintOptions {
        abortOnError false
    }
}

def assembleWebsiteDescriptor = { variant, file ->
    if (file.exists()) {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        file.eachByte 4096, { bytes, size ->
            md.update(bytes, 0, size);
        }

        String digest = md.digest().collect { String.format "%02x", it }.join();
        String url = variant.productFlavors.get(0).ext.websiteUpdateUrl
        String apkName = file.getName()

        String descriptor = "{" +
                "\"versionCode\" : $project.android.defaultConfig.versionCode," +
                "\"versionName\" : \"$project.android.defaultConfig.versionName\"," +
                "\"sha256sum\" : \"$digest\"," +
                "\"url\" : \"$url/$apkName\"" +
                "}"

        File descriptorFile = new File(file.getParent(), apkName.replace(".apk", ".json"))

        descriptorFile.write(descriptor)
    }
}

def signProductionRelease = { variant ->
    String apkName = variant.outputs[0].outputFile.name
    File inputFile = new File(variant.outputs[0].outputFile.path);
    File outputFile = new File(variant.outputs[0].outputFile.parent, apkName.replace("-unsigned", ""));

    new ApkSignerUtil("sun.security.pkcs11.SunPKCS11",
            "pkcs11.config",
            "PKCS11",
            "file:pkcs11.password").calculateSignature(inputFile.getAbsolutePath(),
            outputFile.getAbsolutePath());

    inputFile.delete();
    return outputFile
}

// This was found for Gradle 4.1 to be effective (Enables Test Coverage to default location)
// Enable the coverage report for unit test
android.testOptions {
    unitTests.all {
        jacoco {
            includeNoLocationClasses = true
        }
    }
}

// Jacoco new task created called jacocoDebugReport
task("jacocoDebugReport", type: JacocoReport, dependsOn: "test") {
    group "Reporting"
    description "Generate Jacoco coverage reports."

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                      '**/*Module.*', // Modules for Dagger.
                      '**/*Dagger*.*', // Dagger auto-generated code.
                      '**/*MembersInjector*.*', // Dagger auto-generated code.
                      '**/*_Provide*Factory*.*',
                      '**/*_Factory.*', //Dagger auto-generated code
                      '**/*Factory.*',
                      '**/*$*$*.*', // Anonymous classes generated
                      '**/*Test*.*',
                      '**/*Mock*.*',
                      //add libraries
                      'android/**/*.*',
                      'com/**/*.*',
                      'uk/**/*.*',
                      'io/**/*.*',
                      //remove what we don't test
                      'androidTest/**/*.*',
                      'test/**/*.*',
                      '**/**_ViewBinding**',
                      '**/*EventType.*',
                      '**/**Mocked']

    executionData = files("${buildDir}/jacoco/testPlayDebugUnitTest.exec", "${buildDir}/jacoco/testWebsiteDebugUnitTest.exec")
    def mainSrc = files(["src/", "test/unitTest/java"])
    sourceDirectories = files([mainSrc])
    classDirectories = fileTree(dir: "${buildDir}/intermediates/classes/play/debug", excludes: fileFilter)
//    classDirectories += fileTree(dir: "${buildDir}/intermediates/classes/website/debug", excludes: fileFilter)
}

task signProductionPlayRelease {
    doLast {
        signProductionRelease(android.applicationVariants.find({ it.name.equals("playRelease") }))
    }
}

task signProductionWebsiteRelease {
    doLast {
        def variant = android.applicationVariants.find({ it.name.equals("websiteRelease") })
        File signedRelease = signProductionRelease(variant)
        assembleWebsiteDescriptor(variant, signedRelease);
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.equals("lint")) {
        task.enabled = false
    }

    if (task.name.equals("assemblePlayRelease")) {
        task.finalizedBy signProductionPlayRelease
    }

    if (task.name.equals("assembleWebsiteRelease")) {
        task.finalizedBy signProductionWebsiteRelease
    }
}

def getLastCommitTimestamp() {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'git'
            args = ['log', '-1', '--pretty=format:%ct']
            standardOutput = os
        }

        return os.toString() + "000"
    }
}
